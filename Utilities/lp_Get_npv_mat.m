function [V,Lmax,Kmax,Le,Ke,Lo,Ko,t_est] = lp_Get_npv_mat(lu_trans_cf_new, r, w, n_LuOpts, farmer_transaction_costs)
% ========================================================================
% ** IndoMod function **
% Returns NPV and land and labour requirements for land-use transitions 
% by land use (coffee, vegs, rice, mixed) 
% in Million IDR
% and slope (flat, moderate, steep).
% INPUTS:
%  fname: name of the file containing the discounted cash flow data
%  r : discout rate
%  w : wage rate for household labour in M IDR/day
%  p_vec : price vector [cof, ric, hort, fruit, timber]
% OUTPUTS* 
%  V : NPV of land-use transition (M IDR/ha)
%  Lmax : maximum labour requirement (days/ha) 
%  Kmax : maximum capital requirement (M IDR/ha)
%  Le: labour required during establishment phase
%  Ke: capital required during establishment phase
%  Lo: labour required during operation phase
%  Ko: capital required during operation phase
%  t_est: number of year in establishment phase.  
% * dimensions 4x4x3 (from lu, to lu, slope)
%
%  The input data set was created from discounted cash flows in worksheets 
%   generated by Dan Hill.
%
%  ** In this version the value of timber is included in the final year
%  ** adjustment factors for K and L apply only during operation (not
%     during establishment)
% ========================================================================
% 
p_vec = lu_trans_cf_new.p_tab.price;

% check if a value chain or baseline scenario, and change 'adjust'
% accordingly
if lu_trans_cf_new.adjust.P(end) == 0
    adjust = lu_trans_cf_new.adjust;
    adjust.K(:,end) = 1;
    adjust.L(:,end) = 1;
    adjust.Y(:) = 1;
    adjust.V(:) = 1;
else
    adjust = lu_trans_cf_new.adjust;
end

% currency is in IDR
tmax = size(lu_trans_cf_new.lut_cf{1,1,1},2); % planning horizon
t = [0:tmax-1]';
df = (1+r).^-t; % discount factor starts at year 0
%
t_est = zeros(n_LuOpts,n_LuOpts,3); 
Le = zeros(n_LuOpts,n_LuOpts,3); % labour for establishment
Lo = zeros(n_LuOpts,n_LuOpts,3); % labour for operation
%
Ke = zeros(n_LuOpts,n_LuOpts,3); % capital  for establishment
Ko = zeros(n_LuOpts,n_LuOpts,3); % capital  for operation
%
Lmax = zeros(n_LuOpts,n_LuOpts,3); % labour for original LP
Kmax = zeros(n_LuOpts,n_LuOpts,3); % capital for original LP
for i = 1:n_LuOpts  % from
    for j = 1:n_LuOpts % to
        for k = 1:3 % slope
            X = lu_trans_cf_new.lut_cf{i,j,k}; % full DCF matrix (cols are years)
            % Split X into components
            L = X(lu_trans_cf_new.v.L_rows,:); % labour
            Lf = L(1:7,:); % family
            Lh = L(8:14,:); % hired
            L = Lf + Lh; % total labour per item 
            K = X(lu_trans_cf_new.v.K_rows,:); % capital
            Y = X(lu_trans_cf_new.v.Y_rows,:); % yields
            % split into establishment and operation
            Ltot = sum(L);
            Ktot = sum(K);
            % apply adjustments
            Ladj = sum(L .* adjust.L(:,j)); % total L adjusted
            Kadj = sum(K .* adjust.K(:,j)); % total K adjusted
            if size(adjust.Y,1) == size(Y,1)
                Y = Y .* adjust.Y; % adjustment per output
            end
            P = p_vec .* adjust.P; % adjustment per output
            P = P - farmer_transaction_costs.c_fy; %prices now net of unit level transaction costs
            P = P .* adjust.Pref_weights(:,k); % Adjustment for preferences. 
            % split into establishment and operation
            idx = find(lu_trans_cf_new.est_tab.trans == i*100 + j*10 + k);
            y_est = lu_trans_cf_new.est_tab.yr_est(idx); % years of establishment
            t_est(i,j,k) = y_est;
            % establishment inputs
            if y_est > 0
                Le(i,j,k) = max(Ltot(1:y_est));
                Ke(i,j,k) = max(Ktot(1:y_est)) / 1e+6;
            end
            % operation inputs with adjustment
            Lo(i,j,k) = median(Ladj(y_est+1:tmax));
            Ko(i,j,k) = median(Kadj(y_est+1:tmax)) / 1e+6;
            % final vectors with adjustment for operation phase:
            KK = [Ktot(1:y_est),Kadj(y_est+1:tmax)];
            LL = [Ltot(1:y_est),Ladj(y_est+1:tmax)];
            t_cost = KK + LL * w;  
            if  size(lu_trans_cf_new.v.V_rows,2) == 2 && j == 5 
                v_sell = X(lu_trans_cf_new.v.V_rows(end),tmax) * adjust.V; % timber sale at end for value chain
                timber_rev = v_sell * P(end) * df(tmax); % value chain timber price
            elseif size(lu_trans_cf_new.v.V_rows,2) == 2 && j == 4
                v_sell = X(lu_trans_cf_new.v.V_rows(1),tmax) * adjust.V; % timber sale at end for commodity
                timber_rev = v_sell * P(5) * df(tmax);
            else
                v_sell = X(lu_trans_cf_new.v.V_rows(end),tmax) * adjust.V; 
                timber_rev = v_sell * P(5) * df(tmax);
            end
            t_rev = (Y' * P(1:size(Y,1)))'; % total revenue for all outputs
            npv = (t_rev-t_cost) * df + timber_rev;
            %
            Lmax(i,j,k) = max(LL);
            % K constraint excludes L cost which enters in LP when hired
            % convert to M IDR - 
            Kmax(i,j,k) = max(KK) / 1e+6; 
            %
            V(i,j,k) = npv / 1e+6; 
        end
    end
end
